{"version":3,"sources":["components/Header.js","context/ColorContext.js","components/Quote.js","components/QuoteButtons.js","components/QuoteBox.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","ColorContext","React","createContext","ColorProvider","Provider","ColorConsumer","Consumer","Quote","quote","authorName","randomColor","className","style","color","id","QuoteButtons","getQuote","background","title","href","target","rel","onClick","QuoteBox","Footer","App","props","fetch","then","res","json","data","quoteNum","Math","ceil","random","setState","quotes","author","floor","toString","state","this","document","body","addEventListener","e","keyCode","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2132a32e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return <h1>Quotes to Inspire...</h1>;\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst ColorContext = React.createContext();\r\n\r\nconst ColorProvider = ColorContext.Provider;\r\nconst ColorConsumer = ColorContext.Consumer;\r\n\r\nexport { ColorProvider, ColorConsumer };\r\n","import React from \"react\";\r\nimport { ColorConsumer } from \"../context/ColorContext\";\r\n\r\nfunction Quote({ quote, authorName }) {\r\n  return (\r\n    <ColorConsumer>\r\n      {(randomColor) => (\r\n        <div>\r\n          <div className=\"quote-text\">\r\n            <i className=\"fa fa-quote-left\" style={{ color: randomColor }}></i>\r\n            <span id=\"text\" style={{ color: randomColor }}>\r\n              {quote}\r\n            </span>\r\n          </div>\r\n          <div className=\"quote-author\">\r\n            <span id=\"author\" style={{ color: randomColor }}>\r\n              - {authorName}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </ColorConsumer>\r\n  );\r\n}\r\n\r\nexport default Quote;\r\n","import React from \"react\";\r\nimport { ColorConsumer } from \"../context/ColorContext\";\r\n\r\nfunction QuoteButtons({ getQuote }) {\r\n  return (\r\n    <ColorConsumer>\r\n      {(randomColor) => (\r\n        <div className=\"buttons-container\">\r\n          <div className=\"social-media-buttons-container\">\r\n            <button style={{ background: randomColor }}>\r\n              <a\r\n                id=\"tweet-quote\"\r\n                title=\"Tweet this quote!\"\r\n                href=\"https://www.twitter.com/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                <i className=\"fab fa-twitter\"></i>\r\n              </a>\r\n            </button>\r\n            <button style={{ background: randomColor }}>\r\n              <a\r\n                id=\"tumblr-quote\"\r\n                title=\"Share on Instagram!\"\r\n                href=\"https://www.instagram.com/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                <i className=\"fab fa-instagram\"></i>\r\n              </a>\r\n            </button>\r\n            <button style={{ background: randomColor }}>\r\n              <a\r\n                id=\"tumblr-quote\"\r\n                title=\"Post on Facebook\"\r\n                href=\"https://www.facebook.com/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                <i className=\"fab fa-facebook\"></i>\r\n              </a>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"quote-button-container\">\r\n            <button\r\n              className=\"shuffle\"\r\n              title=\"Shuffle\"\r\n              onClick={getQuote}\r\n              style={{ background: randomColor }}\r\n            >\r\n              <i className=\"fas fa-random\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </ColorConsumer>\r\n  );\r\n}\r\n\r\nexport default QuoteButtons;\r\n","import React from \"react\";\r\nimport Quote from \"./Quote\";\r\nimport QuoteButtons from \"./QuoteButtons\";\r\n\r\nfunction QuoteBox({ quote, authorName, getQuote }) {\r\n  return (\r\n    <div id=\"quote-box\" className=\"quote-box\">\r\n      <Quote quote={quote} authorName={authorName} />\r\n      <QuoteButtons getQuote={getQuote} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuoteBox;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer title=\"Visit GitHub page\">\r\n      &copy;{\" \"}\r\n      <a\r\n        href=\"https://github.com/xandert93\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        xandert.93\r\n      </a>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport Footer from \"./components/Footer\";\nimport { ColorProvider } from \"./context/ColorContext\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quote: \"\",\n      authorName: \"\",\n      randomColor: \"white\",\n    };\n  }\n\n  componentDidMount() {\n    this.getQuote();\n    document.body.addEventListener(\"keyup\", (e) => {\n      e.keyCode === 13 && this.getQuote();\n    });\n  }\n\n  getQuote = () => {\n    fetch(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        let quoteNum = Math.ceil(Math.random() * 100);\n        this.setState({\n          quote: data.quotes[quoteNum].quote,\n          authorName: data.quotes[quoteNum].author,\n          randomColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n        });\n      });\n  };\n\n  render() {\n    let { quote, authorName, randomColor } = this.state;\n    return (\n      <div id=\"wrapper\" style={{ background: randomColor }}>\n        <ColorProvider value={randomColor}>\n          <Header />\n          <QuoteBox\n            quote={quote}\n            authorName={authorName}\n            getQuote={this.getQuote}\n          />\n          <Footer />\n        </ColorProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}